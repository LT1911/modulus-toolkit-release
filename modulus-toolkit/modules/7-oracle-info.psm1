# PSScriptAnalyzer disable PSAvoidUnapprovedVerbs

#tlukas, 06.08.2024

#write-host "Loading 7-oracle-info.psm1!" -ForegroundColor Green

#region --- info-functions
function Show-GLX-oracle-patch-version {

    $user   = 'sys'
    $DB     = 'GLX'
    $script = 'oracle_patch_version.sql'
    $cred   = Get-DatabaseCredentials -user $user -DB $DB
    #$wd     = 'G:\Export'
    #$output = 'grant_sys_privileges.sql'

    # steps before execution
    #$cwd = Get-Location
    #Set-Location -Path $wd
    # removing previously spooled output!
    #if (Test-Path $output) {
    #    write-host "Removing $wd\$output - it will be regenerated by the spooled output!" -ForegroundColor Yellow
    #    remove-item $output -ErrorAction SilentlyContinue
    #}

    # execution + info
    #Write-Host "Starting execution of $file for $DB_NAME!"
    #Write-Host "Started at:  $(Get-Date)"
    #write-host "Spooling output to: $wd\$output" -ForegroundColor Yellow
    if (Test-Path "D:\Oracle\Ora19c") {
        write-host "Showing oracle OPatch version within D:\Oracle\Ora19c\OPatch" -ForegroundColor Yellow
        opatch version
    }

	write-host "Showing oracle patch version within $DB " -ForegroundColor Yellow
    Execute-SQL-Script -cred $cred -DB $DB -script $script

    # steps after execution
    #Write-Host "Execution completed for $file"
    #Write-Host "Completed at: $(Get-Date)"
    #write-host "Spooled output to:" -ForegroundColor Yellow
    #write-host "np $wd\$output" -ForegroundColor Yellow
    #Set-Location -Path $cwd

}

function Show-JKP-oracle-patch-version {

    $user   = 'sys'
    $DB     = 'JKP'
    $script = 'oracle_patch_version.sql'
    $cred   = Get-DatabaseCredentials -user $user -DB $DB
    #$wd     = 'G:\Export'
    #$output = 'grant_sys_privileges.sql'

    # steps before execution
    #$cwd = Get-Location
    #Set-Location -Path $wd
    # removing previously spooled output!
    #if (Test-Path $output) {
    #    write-host "Removing $wd\$output - it will be regenerated by the spooled output!" -ForegroundColor Yellow
    #    remove-item $output -ErrorAction SilentlyContinue
    #}

    # execution + info
    #Write-Host "Starting execution of $file for $DB_NAME!"
    #Write-Host "Started at:  $(Get-Date)"
    #write-host "Spooling output to: $wd\$output" -ForegroundColor Yellow
    if (Test-Path "D:\Oracle\Ora19c") {
        write-host "Showing oracle OPatch version within D:\Oracle\Ora19c\OPatch" -ForegroundColor Yellow
        opatch version
    }
    
	write-host "Showing oracle patch version within $DB " -ForegroundColor Yellow
    Execute-SQL-Script -cred $cred -DB $DB -script $script

    # steps after execution
    #Write-Host "Execution completed for $file"
    #Write-Host "Completed at: $(Get-Date)"
    #write-host "Spooled output to:" -ForegroundColor Yellow
    #write-host "np $wd\$output" -ForegroundColor Yellow
    #Set-Location -Path $cwd
}

function Show-GLX-mod-users {

    $user   = 'sys'
    $DB     = 'GLX'
    $script = 'list_mod_users.sql'
    $cred   = Get-DatabaseCredentials -user $user -DB $DB
    #$wd     = 'G:\Export'
    #$output = 'grant_sys_privileges.sql'

    # steps before execution
    #$cwd = Get-Location
    #Set-Location -Path $wd
    # removing previously spooled output!
    #if (Test-Path $output) {
    #    write-host "Removing $wd\$output - it will be regenerated by the spooled output!" -ForegroundColor Yellow
    #    remove-item $output -ErrorAction SilentlyContinue
    #}

    # execution + info
    #Write-Host "Starting execution of $file for $DB_NAME!"
    #Write-Host "Started at:  $(Get-Date)"
    #write-host "Spooling output to: $wd\$output" -ForegroundColor Yellow
	write-host "Listing modulus-specific users within $DB " -ForegroundColor Yellow
    Execute-SQL-Script -cred $cred -DB $DB -script $script

    # steps after execution
    #Write-Host "Execution completed for $file"
    #Write-Host "Completed at: $(Get-Date)"
    #write-host "Spooled output to:" -ForegroundColor Yellow
    #write-host "np $wd\$output" -ForegroundColor Yellow
    #Set-Location -Path $cwd

}

function Show-GLX-dba-users {
    write-host "still TODO"
}

function Show-GLX-betabli {

    $user   = 'sys'
    $DB     = 'GLX'
    $script = 'check_galaxis_betabli.sql'
    $cred   = Get-DatabaseCredentials -user $user -DB $DB

	write-host "Listing relevant content of table galaxis.betabli within $DB " -ForegroundColor Yellow
    Execute-SQL-Script -cred $cred -DB $DB -script $script

}

function Show-JKP-mod-users {

    $user   = 'sys'
    $DB     = 'JKP'
    $script = 'list_mod_users.sql'
    $cred   = Get-DatabaseCredentials -user $user -DB $DB
    #$wd     = 'G:\Export'
    #$output = 'grant_sys_privileges.sql'

    # steps before execution
    #$cwd = Get-Location
    #Set-Location -Path $wd
    # removing previously spooled output!
    #if (Test-Path $output) {
    #    write-host "Removing $wd\$output - it will be regenerated by the spooled output!" -ForegroundColor Yellow
    #    remove-item $output -ErrorAction SilentlyContinue
    #}

    # execution + info
    #Write-Host "Starting execution of $file for $DB_NAME!"
    #Write-Host "Started at:  $(Get-Date)"
    #write-host "Spooling output to: $wd\$output" -ForegroundColor Yellow
	write-host "Listing modulus-specific users within $DB " -ForegroundColor Yellow
    Execute-SQL-Script -cred $cred -DB $DB -script $script

    # steps after execution
    #Write-Host "Execution completed for $file"
    #Write-Host "Completed at: $(Get-Date)"
    #write-host "Spooled output to:" -ForegroundColor Yellow
    #write-host "np $wd\$output" -ForegroundColor Yellow
    #Set-Location -Path $cwd

}

function Show-JKP-dba-users {
    write-host "still TODO"   
}

function Show-JKP-DB-version {

    $user   = 'as_security'
    $DB     = 'JKP'
    $script = 'grips_patch_table_check.sql'
    $cred   = Get-DatabaseCredentials -user $user -DB $DB
    #$wd     = 'G:\Export'
    #$output = 'grant_sys_privileges.sql'

    # steps before execution
    #$cwd = Get-Location
    #Set-Location -Path $wd
    # removing previously spooled output!
    #if (Test-Path $output) {
    #    write-host "Removing $wd\$output - it will be regenerated by the spooled output!" -ForegroundColor Yellow
    #    remove-item $output -ErrorAction SilentlyContinue
    #}

    # execution + info
    #Write-Host "Starting execution of $file for $DB_NAME!"
    #Write-Host "Started at:  $(Get-Date)"
    #write-host "Spooling output to: $wd\$output" -ForegroundColor Yellow
	write-host "Modules and versions in $user " -ForegroundColor Yellow
    Execute-SQL-Script -cred $cred -DB $DB -script $script

    #2nd execution with different user
    $user   = 'as_jackpot'
    $cred   = Get-DatabaseCredentials -user $user -DB $DB
	write-host "Modules and versions in $user " -ForegroundColor Yellow
    Execute-SQL-Script -cred $cred -DB $DB -script $script

    # steps after execution
    #Write-Host "Execution completed for $file"
    #Write-Host "Completed at: $(Get-Date)"
    #write-host "Spooled output to:" -ForegroundColor Yellow
    #write-host "np $wd\$output" -ForegroundColor Yellow
    #Set-Location -Path $cwd

}
#endregion

#region --- sys and table privileges
function Spool-GLX-sys-privileges {

    $user   = 'sys'
    $DB     = 'GLX'
    $script = 'spool_sys_privileges.sql'
    $cred   = Get-DatabaseCredentials -user $user -DB $DB
    $wd     = 'G:\Export'
    $output = 'grant_sys_privileges.sql'

    # steps before execution
    $cwd = Get-Location
    Set-Location -Path $wd
    # removing previously spooled output!
    if (Test-Path $output) {
        write-host "Removing $wd\$output - it will be regenerated by the spooled output!" -ForegroundColor Yellow
        remove-item $output -ErrorAction SilentlyContinue
    }

    # execution + info
    #Write-Host "Starting execution of $file for $DB_NAME!"
    #Write-Host "Started at:  $(Get-Date)"
    write-host "Spooling output to: $wd\$output" -ForegroundColor Yellow
    Execute-SQL-Script -cred $cred -DB $DB -script $script

    # steps after execution
    #Write-Host "Execution completed for $file"
    #Write-Host "Completed at: $(Get-Date)"
    write-host "Spooled output to:" -ForegroundColor Yellow
    write-host "np $wd\$output" -ForegroundColor Yellow
    Set-Location -Path $cwd
}

function Spool-JKP-sys-privileges {

    $user   = 'sys'
    $DB     = 'JKP'
    $script = 'spool_sys_privileges.sql'
    $cred   = Get-DatabaseCredentials -user $user -DB $DB
    $wd     = 'F:\Export'
    $output = 'grant_sys_privileges.sql'

    # steps before execution
    $cwd = Get-Location
    Set-Location -Path $wd
    # removing previously spooled output!
    if (Test-Path $output) {
        write-host "Removing $wd\$output - it will be regenerated by the spooled output!" -ForegroundColor Yellow
        remove-item $output -ErrorAction SilentlyContinue
    }

    # execution + info
    #Write-Host "Starting execution of $file for $DB_NAME!"
    #Write-Host "Started at:  $(Get-Date)"
    write-host "Spooling output to: $wd\$output" -ForegroundColor Yellow
    Execute-SQL-Script -cred $cred -DB $DB -script $script

    # steps after execution
    #Write-Host "Execution completed for $file"
    #Write-Host "Completed at: $(Get-Date)"
    write-host "Spooled output to:" -ForegroundColor Yellow
    write-host "np $wd\$output" -ForegroundColor Yellow
    Set-Location -Path $cwd
}

function Spool-GLX-table-privileges {
    
    $user   = 'sys'
    $DB     = 'GLX'
    $script = 'spool_table_privileges.sql'
    $cred   = Get-DatabaseCredentials -user $user -DB $DB
    $wd     = 'G:\Export'
    $output = 'grant_table_privileges.sql'

    # steps before execution
    $cwd = Get-Location
    Set-Location -Path $wd
    # removing previously spooled output!
    if (Test-Path $output) {
        write-host "Removing $wd\$output - it will be regenerated by the spooled output!" -ForegroundColor Yellow
        remove-item $output -ErrorAction SilentlyContinue
    }

    # execution + info
    #Write-Host "Starting execution of $file for $DB_NAME!"
    #Write-Host "Started at:  $(Get-Date)"
    write-host "Spooling output to: $wd\$output" -ForegroundColor Yellow
    Execute-SQL-Script -cred $cred -DB $DB -script $script

    # steps after execution
    #Write-Host "Execution completed for $file"
    #Write-Host "Completed at: $(Get-Date)"
    write-host "Spooled output to:" -ForegroundColor Yellow
    write-host "np $wd\$output" -ForegroundColor Yellow
    Set-Location -Path $cwd
}

function Spool-JKP-table-privileges {
    
    $user   = 'sys'
    $DB     = 'JKP'
    $script = 'spool_table_privileges.sql'
    $cred   = Get-DatabaseCredentials -user $user -DB $DB
    $wd     = 'F:\Export'
    $output = 'grant_table_privileges.sql'

    # steps before execution
    $cwd = Get-Location
    Set-Location -Path $wd
    # removing previously spooled output!
    if (Test-Path $output) {
        write-host "Removing $wd\$output - it will be regenerated by the spooled output!" -ForegroundColor Yellow
        remove-item $output -ErrorAction SilentlyContinue
    }

    # execution + info
    #Write-Host "Starting execution of $file for $DB_NAME!"
    #Write-Host "Started at:  $(Get-Date)"
    write-host "Spooling output to: $wd\$output" -ForegroundColor Yellow
    Execute-SQL-Script -cred $cred -DB $DB -script $script

    # steps after execution
    #Write-Host "Execution completed for $file"
    #Write-Host "Completed at: $(Get-Date)"
    write-host "Spooled output to:" -ForegroundColor Yellow
    write-host "np $wd\$output" -ForegroundColor Yellow
    Set-Location -Path $cwd
}
#endregion

#region --- Compilation
function Compile-GLX-Serial {

    $user   = 'sys'
    $DB     = 'GLX'
    $script = 'recomp_serial.sql'
    $cred   = Get-DatabaseCredentials -user $user -DB $DB
    #$wd     = 'G:\Export'
    #$output = 'output_recomp_serial.sql'

    # steps before execution
    #$cwd = Get-Location
    #Set-Location -Path $wd

    #if (!(Test-Path $script)) {
    #    write-host "$wd\$script does not exist, aborting!" -ForegroundColor Red
    #    Return $false
    #}

    # removing previously spooled output!
    #if (Test-Path $output) {
    #    write-host "Removing $wd\$output - it will be regenerated by the spooled output!" -ForegroundColor Yellow
    #    remove-item $output -ErrorAction SilentlyContinue
    #}

    # execution + info
    #Write-Host "Starting execution of $file for $DB_NAME!"
    #Write-Host "Started at:  $(Get-Date)"
    write-host "Compiling database $DB using $script!" -ForegroundColor Yellow
    Execute-SQL-Script -cred $cred -DB $DB -script $script
    
    # steps after execution
    #Write-Host "Execution completed for $file"
    #Write-Host "Completed at: $(Get-Date)"
    write-host "Finished compiling database $DB!" -ForegroundColor Yellow
    Write-host "Please check and recompile if needed!" -ForegroundColor Red
    #write-host "Spooled output to:" -ForegroundColor Yellow
    #write-host "np $wd\$output" -ForegroundColor Yellow
    #Set-Location -Path $cwd
}

function Compile-JKP-Serial {

    $user   = 'sys'
    $DB     = 'JKP'
    $script = 'recomp_serial.sql'
    $cred   = Get-DatabaseCredentials -user $user -DB $DB
    #$wd     = 'F:\Export'
    #$output = 'output_recomp_serial.sql'

    # steps before execution
    #$cwd = Get-Location
    #Set-Location -Path $wd

    #if (!(Test-Path $script)) {
    #    write-host "$wd\$script does not exist, aborting!" -ForegroundColor Red
    #    Return $false
    #}

    # removing previously spooled output!
    #if (Test-Path $output) {
    #    write-host "Removing $wd\$output - it will be regenerated by the spooled output!" -ForegroundColor Yellow
    #    remove-item $output -ErrorAction SilentlyContinue
    #}

    # execution + info
    #Write-Host "Starting execution of $file for $DB_NAME!"
    #Write-Host "Started at:  $(Get-Date)"
    write-host "Compiling database $DB using $script!" -ForegroundColor Yellow
    Execute-SQL-Script -cred $cred -DB $DB -script $script
    
    # steps after execution
    #Write-Host "Execution completed for $file"
    #Write-Host "Completed at: $(Get-Date)"
    write-host "Finished compiling database $DB!" -ForegroundColor Yellow
    Write-host "Please check and recompile if needed!" -ForegroundColor Red
    #write-host "Spooled output to:" -ForegroundColor Yellow
    #write-host "np $wd\$output" -ForegroundColor Yellow
    #Set-Location -Path $cwd
}

function Compile-GLX-Invalids {

    $user   = 'sys'
    $DB     = 'GLX'
    $script = 'compile_database.sql'
    $cred   = Get-DatabaseCredentials -user $user -DB $DB
    #$wd     = 'G:\Export'
    #$output = 'output_compile_database.sql'

    # steps before execution
    #$cwd = Get-Location
    #Set-Location -Path $wd

    #if (!(Test-Path $script)) {
    #    write-host "$wd\$script does not exist, aborting!" -ForegroundColor Red
    #    Return $false
    #}

    # removing previously spooled output!
    #if (Test-Path $output) {
    #    write-host "Removing $wd\$output - it will be regenerated by the spooled output!" -ForegroundColor Yellow
    #    remove-item $output -ErrorAction SilentlyContinue
    #}

    # execution + info
    #Write-Host "Starting execution of $file for $DB_NAME!"
    #Write-Host "Started at:  $(Get-Date)"
    write-host "Compiling database $DB using $script!" -ForegroundColor Yellow
    Execute-SQL-Script -cred $cred -DB $DB -script $script
    
    # steps after execution
    #Write-Host "Execution completed for $file"
    #Write-Host "Completed at: $(Get-Date)"
    write-host "Finished compiling database $DB!" -ForegroundColor Yellow
    Write-host "Please check and recompile if needed!" -ForegroundColor Red
    #write-host "Spooled output to:" -ForegroundColor Yellow
    #write-host "np $wd\$output" -ForegroundColor Yellow
    #Set-Location -Path $cwd
}

function Compile-JKP-Invalids {

    $user   = 'sys'
    $DB     = 'JKP'
    $script = 'compile_database.sql'
    $cred   = Get-DatabaseCredentials -user $user -DB $DB
    #$wd     = 'F:\Export'
    #$output = 'output_compile_database.sql'

    # steps before execution
    #$cwd = Get-Location
    #Set-Location -Path $wd

    #if (!(Test-Path $script)) {
    #    write-host "$wd\$script does not exist, aborting!" -ForegroundColor Red
    #    Return $false
    #}

    # removing previously spooled output!
    #if (Test-Path $output) {
    #    write-host "Removing $wd\$output - it will be regenerated by the spooled output!" -ForegroundColor Yellow
    #    remove-item $output -ErrorAction SilentlyContinue
    #}

    # execution + info
    #Write-Host "Starting execution of $file for $DB_NAME!"
    #Write-Host "Started at:  $(Get-Date)"
    write-host "Compiling database $DB using $script!" -ForegroundColor Yellow
    Execute-SQL-Script -cred $cred -DB $DB -script $script
    
    # steps after execution
    #Write-Host "Execution completed for $file"
    #Write-Host "Completed at: $(Get-Date)"
    write-host "Finished compiling database $DB!" -ForegroundColor Yellow
    Write-host "Please check and recompile if needed!" -ForegroundColor Red
    #write-host "Spooled output to:" -ForegroundColor Yellow
    #write-host "np $wd\$output" -ForegroundColor Yellow
    #Set-Location -Path $cwd
}

function Show-GLX-Invalids {

    $user   = 'sys'
    $DB     = 'GLX'
    $script = 'check_invalid_objects.sql'
    $cred   = Get-DatabaseCredentials -user $user -DB $DB
    #$wd     = 'G:\Export'
    #$output = 'output_compile_database.sql'

    # steps before execution
    #$cwd = Get-Location
    #Set-Location -Path $wd

    #if (!(Test-Path $script)) {
    #    write-host "$wd\$script does not exist, aborting!" -ForegroundColor Red
    #    Return $false
    #}

    # removing previously spooled output!
    #if (Test-Path $output) {
    #    write-host "Removing $wd\$output - it will be regenerated by the spooled output!" -ForegroundColor Yellow
    #    remove-item $output -ErrorAction SilentlyContinue
    #}

    # execution + info
    #Write-Host "Starting execution of $file for $DB_NAME!"
    #Write-Host "Started at:  $(Get-Date)"
    write-host "Listing invalid objects in $DB using $script!" -ForegroundColor Yellow
    Execute-SQL-Script -cred $cred -DB $DB -script $script
    
    # steps after execution
    #Write-Host "Execution completed for $file"
    #Write-Host "Completed at: $(Get-Date)"
    write-host "Finished listing invalid objects in $DB!" -ForegroundColor Yellow
    #Write-host "Please check and recompile if needed!" -ForegroundColor Red
    #write-host "Spooled output to:" -ForegroundColor Yellow
    #write-host "np $wd\$output" -ForegroundColor Yellow
    #Set-Location -Path $cwd
}

function Show-JKP-Invalids {

    $user   = 'sys'
    $DB     = 'JKP'
    $script = 'check_invalid_objects.sql'
    $cred   = Get-DatabaseCredentials -user $user -DB $DB
    #$wd     = 'F:\Export'
    #$output = 'output_compile_database.sql'

    # steps before execution
    #$cwd = Get-Location
    #Set-Location -Path $wd

    #if (!(Test-Path $script)) {
    #    write-host "$wd\$script does not exist, aborting!" -ForegroundColor Red
    #    Return $false
    #}

    # removing previously spooled output!
    #if (Test-Path $output) {
    #    write-host "Removing $wd\$output - it will be regenerated by the spooled output!" -ForegroundColor Yellow
    #    remove-item $output -ErrorAction SilentlyContinue
    #}

    # execution + info
    #Write-Host "Starting execution of $file for $DB_NAME!"
    #Write-Host "Started at:  $(Get-Date)"
    write-host "Listing invalid objects in $DB using $script!" -ForegroundColor Yellow
    Execute-SQL-Script -cred $cred -DB $DB -script $script
    
    # steps after execution
    #Write-Host "Execution completed for $file"
    #Write-Host "Completed at: $(Get-Date)"
    write-host "Finished listing invalid objects in $DB!" -ForegroundColor Yellow
    #Write-host "Please check and recompile if needed!" -ForegroundColor Red
    #write-host "Spooled output to:" -ForegroundColor Yellow
    #write-host "np $wd\$output" -ForegroundColor Yellow
    #Set-Location -Path $cwd
}

function Show-GLX-BrokenJobs {

    $user   = 'sys'
    $DB     = 'GLX'
    $script = 'broken_dba_jobs.sql'
    $cred   = Get-DatabaseCredentials -user $user -DB $DB
    #$wd     = 'G:\Export'
    #$output = 'output_compile_database.sql'

    # steps before execution
    #$cwd = Get-Location
    #Set-Location -Path $wd

    #if (!(Test-Path $script)) {
    #    write-host "$wd\$script does not exist, aborting!" -ForegroundColor Red
    #    Return $false
    #}

    # removing previously spooled output!
    #if (Test-Path $output) {
    #    write-host "Removing $wd\$output - it will be regenerated by the spooled output!" -ForegroundColor Yellow
    #    remove-item $output -ErrorAction SilentlyContinue
    #}

    # execution + info
    #Write-Host "Starting execution of $file for $DB_NAME!"
    #Write-Host "Started at:  $(Get-Date)"
    write-host "Listing broken jobs in $DB using $script!" -ForegroundColor Yellow
    Execute-SQL-Script -cred $cred -DB $DB -script $script
    
    # steps after execution
    #Write-Host "Execution completed for $file"
    #Write-Host "Completed at: $(Get-Date)"
    write-host "Finished listing broken jobs in $DB!" -ForegroundColor Yellow
    #Write-host "Please check and recompile if needed!" -ForegroundColor Red
    #write-host "Spooled output to:" -ForegroundColor Yellow
    #write-host "np $wd\$output" -ForegroundColor Yellow
    #Set-Location -Path $cwd
}

function Show-JKP-BrokenJobs {

    $user   = 'sys'
    $DB     = 'JKP'
    $script = 'broken_dba_jobs.sql'
    $cred   = Get-DatabaseCredentials -user $user -DB $DB
    #$wd     = 'G:\Export'
    #$output = 'output_compile_database.sql'

    # steps before execution
    #$cwd = Get-Location
    #Set-Location -Path $wd

    #if (!(Test-Path $script)) {
    #    write-host "$wd\$script does not exist, aborting!" -ForegroundColor Red
    #    Return $false
    #}

    # removing previously spooled output!
    #if (Test-Path $output) {
    #    write-host "Removing $wd\$output - it will be regenerated by the spooled output!" -ForegroundColor Yellow
    #    remove-item $output -ErrorAction SilentlyContinue
    #}

    # execution + info
    #Write-Host "Starting execution of $file for $DB_NAME!"
    #Write-Host "Started at:  $(Get-Date)"
    write-host "Listing broken jobs in $DB using $script!" -ForegroundColor Yellow
    Execute-SQL-Script -cred $cred -DB $DB -script $script
    
    # steps after execution
    #Write-Host "Execution completed for $file"
    #Write-Host "Completed at: $(Get-Date)"
    write-host "Finished listing broken jobs in $DB!" -ForegroundColor Yellow
    #Write-host "Please check and recompile if needed!" -ForegroundColor Red
    #write-host "Spooled output to:" -ForegroundColor Yellow
    #write-host "np $wd\$output" -ForegroundColor Yellow
    #Set-Location -Path $cwd
}

#endregion

#region --- helpers
function Confirm-Action {
    param (
        [string]$ExpectedConfirmationText = "CONFIRM",
        [string]$WarningMessage = "This action is potentially dangerous and may have significant consequences."
    )
    write-host "  !!!  " -ForegroundColor Red
    Write-Host "WARNING: $WarningMessage" -ForegroundColor Red
    write-host "  !!!  " -ForegroundColor Red
    Write-Host "To proceed, type '$ExpectedConfirmationText'. To cancel, press Enter." -ForegroundColor Yellow
    
    $userInput = Read-Host "Enter confirmation"

    if ($userInput -eq $ExpectedConfirmationText) {
        return $true
    } else {
        Write-Output "Action cancelled by the user."
        return $false
    }
}

function Get-DatabaseCredentials {
    param (
        [string]$user,
        [string]$DB
    )

    $cred = Get-CredentialFromVault -User $user -Target $DB

    if (-not $cred) {
        Set-CredentialInVault -User $user -Target $DB
        $cred = Get-CredentialFromVault -User $user -Target $DB
    }

    <#old:
    $credDir = 'C:\Program Files\WindowsPowerShell\Modules\modulus-toolkit\oracle\credentials'
    $credXML = "$credDir\$user$DB.xml"

    if (!(Test-Path $credXML)) {
        Set-DatabaseCredentials -user $user -DB $DB
    }

    $cred = Import-CliXml -Path $credXML
    #>
    
    return $cred
}

function Set-DatabaseCredentials {
    param (
        [string]$user,
        [string]$DB
    )

    Set-CredentialInVault -User $user -Target $DB

    <#old:
    $credDir = 'C:\Program Files\WindowsPowerShell\Modules\modulus-toolkit\oracle\credentials'

    write-host "Input needed!" -ForegroundColor Red

    # Prompt for the user if not provided
    if (-not $user) {
       
        $user = Read-Host -Prompt "Enter the user of the credential you want to save!"
    }

    # Prompt for the DB name if not provided
    if (-not $DB) {
        write-host "Input needed!" -ForegroundColor Red
        $DB = Read-Host -Prompt "Enter the name of the database of the credential you want to save!"
    }

    # Prompt for the password
    $pass = Read-Host -Prompt "Enter the password for $user@$DB" -AsSecureString

    # Create a PSCredential object with the provided or prompted credentials
    $securePassword = $pass
    $cred = New-Object System.Management.Automation.PSCredential ($user, $securePassword)

    # Create the XML file name based on the username and database name
    $credXML = "$user$DB.xml"

    # Save to an XML file using Export-Clixml
    $cred | Export-Clixml -Path "$credDir\$credXML"

    Write-Host "Credentials saved to $credXML" -ForegroundColor Yellow
    #>
}

<#
function Execute-SQL-Script {
    param (
        [PSCredential]$cred,    
        [string]$DB,
        [string]$script,
        [string]$scriptPath,
        [string]$scriptArgs = ""
    )

    if (-not $scriptPath) {
        $scriptDir = 'C:\Program Files\PowerShell\Modules\modulus-toolkit\scripts\'
        $scriptPath = "$scriptDir$script"
    }
    
    $user = $cred.UserName
    $pass = $cred.GetNetworkCredential().Password

    if (Test-Path $scriptPath) {

        $scriptToExecute = '"' + $scriptPath + '"'
        
        if($cred.UserName -eq 'sys' ) {
            $sqlplusCommand = "sqlplus -silent $user/$pass@$DB as sysdba @$scriptToExecute $scriptArgs"
        }
        else {
            $sqlplusCommand = "sqlplus -silent $user/$pass@$DB @$scriptToExecute $scriptArgs"
        }

        #Write-Host "TODO maybe output here?"
        #write-host $sqlplusCommand
        write-host "   "
        cmd /c $sqlplusCommand
        write-host "   "

    } else {
        Write-Host "SQL file not found at $scriptPath!" -ForegroundColor Red
    }
}
##>

function Execute-SQL-Script {
    param (
        [PSCredential]$cred,    
        [string]$DB,
        [string]$script,
        [string]$scriptPath,
        [string]$scriptArgs = ""
    )

    # Set default path if scriptPath is not provided
    if (-not $scriptPath) {
        $scriptDir = 'C:\Program Files\PowerShell\Modules\modulus-toolkit\scripts\'
        $scriptPath = "$scriptDir$script"
    }

    $user = $cred.UserName
    $pass = $cred.GetNetworkCredential().Password

    if (Test-Path $scriptPath) {
        # Prepare SQL*Plus command
        $scriptToExecute = "`"$scriptPath`""
        $sqlplusCommand = if ($cred.UserName -eq 'sys') {
            "sqlplus -silent $user/$pass@$DB as sysdba @$scriptToExecute $scriptArgs"
        } else {
            "sqlplus -silent $user/$pass@$DB @$scriptToExecute $scriptArgs"
        }

        # Execute the command and capture output
        try {
            $output = cmd /c $sqlplusCommand 2>&1
            #Write-Output "SQL Script Output:"
            #Write-Output $output
            Return $output
        }
        catch {
            Write-Output "An error occurred while executing the SQL script." -ForegroundColor Red
            Write-Output $_.Exception.Message
            Return $false
        }

    } else {
        Write-Output "SQL file not found at $scriptPath!" -ForegroundColor Red
        Return $false
    }
}

#endregion

#region --- expdp / impdp
function Spool-GLX-drop-users {

    $user   = 'sys'
    $DB     = 'GLX'
    $script = 'spool_drop_mod_users.sql'
    $cred   = Get-DatabaseCredentials -user $user -DB $DB
    $wd     = 'G:\Export'
    $output = 'drop_mod_users.sql'

    # steps before execution
    $cwd = Get-Location
    Set-Location -Path $wd

    #if (!(Test-Path $script)) {
    #    write-host "$wd\$script does not exist, aborting!" -ForegroundColor Red
    #    Return $false
    #}

    # removing previously spooled output!
    if (Test-Path $output) {
        write-host "Removing $wd\$output - it will be regenerated by the spooled output!" -ForegroundColor Yellow
        remove-item $output -ErrorAction SilentlyContinue
    }

    # execution + info
    #Write-Host "Starting execution of $file for $DB_NAME!"
    #Write-Host "Started at:  $(Get-Date)"
    write-host "Spooling users to be dropped to: $wd\$output" -ForegroundColor Yellow
    Execute-SQL-Script -cred $cred -DB $DB -script $script
    
    # steps after execution
    #Write-Host "Execution completed for $file"
    #Write-Host "Completed at: $(Get-Date)"
    write-host "Spooled output to:" -ForegroundColor Yellow
    write-host "np $wd\$output" -ForegroundColor Yellow
    Set-Location -Path $cwd
}

function Spool-JKP-drop-users {

    $user   = 'sys'
    $DB     = 'JKP'
    $script = 'spool_drop_mod_users.sql'
    $cred   = Get-DatabaseCredentials -user $user -DB $DB
    $wd     = 'F:\Export'
    $output = 'drop_mod_users.sql'

    # steps before execution
    $cwd = Get-Location
    Set-Location -Path $wd

    #if (!(Test-Path $script)) {
    #    write-host "$wd\$script does not exist, aborting!" -ForegroundColor Red
    #    Return $false
    #}

    # removing previously spooled output!
    if (Test-Path $output) {
        write-host "Removing $wd\$output - it will be regenerated by the spooled output!" -ForegroundColor Yellow
        remove-item $output -ErrorAction SilentlyContinue
    }

    # execution + info
    #Write-Host "Starting execution of $file for $DB_NAME!"
    #Write-Host "Started at:  $(Get-Date)"
    write-host "Spooling users to be dropped to: $wd\$output" -ForegroundColor Yellow
    Execute-SQL-Script -cred $cred -DB $DB -script $script
    
    # steps after execution
    #Write-Host "Execution completed for $file"
    #Write-Host "Completed at: $(Get-Date)"
    write-host "Spooled output to:" -ForegroundColor Yellow
    write-host "np $wd\$output" -ForegroundColor Yellow
    Set-Location -Path $cwd
}
#endregion

#region --- GLI checksums 
function Show-JKP-SHA1-checksums {

    $user   = 'sys'
    $DB     = 'JKP'
    $script = 'db_object_hash_SHA1.sql'
    $scriptArgs = 'AS_JACKPOT GALAXIS MIS'
    $cred   = Get-DatabaseCredentials -user $user -DB $DB
    #$wd     = 'F:\Export'
    #$output = 'spooled_db_object_hash_SHA1.sql'

    # steps before execution
    #$cwd = Get-Location
    #Set-Location -Path $wd

    #if (!(Test-Path $script)) {
    #    write-host "$wd\$script does not exist, aborting!" -ForegroundColor Red
    #    Return $false
    #}

    # removing previously spooled output!
    #if (Test-Path $output) {
    #    write-host "Removing $wd\$output - it will be regenerated by the spooled output!" -ForegroundColor Yellow
    #    remove-item $output -ErrorAction SilentlyContinue
    #}

    # execution + info
    #Write-Host "Starting execution of $file for $DB_NAME!"
    #Write-Host "Started at:  $(Get-Date)"
    #write-host "Spooling users to be dropped to: $wd\$output" -ForegroundColor Yellow
    Execute-SQL-Script -cred $cred -DB $DB -script $script -scriptArgs $scriptArgs
    
    # steps after execution
    #Write-Host "Execution completed for $file"
    #Write-Host "Completed at: $(Get-Date)"
    #write-host "Spooled output to:" -ForegroundColor Yellow
    #write-host "np $wd\$output" -ForegroundColor Yellow
    #Set-Location -Path $cwd
}
#endregion